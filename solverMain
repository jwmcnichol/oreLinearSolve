import pulp

# Define the problem
problem = pulp.LpProblem("Ore_Minimization", pulp.LpMinimize)

# Define the variables
# Amount of each ore to use (non-negative)
ores = ["Veldspar", "Scordite", "Pyroxeres", "Plagioclase", "Omber", "Kernite", "Jaspet", "Hemorphite", "Hedbergite", "Gneiss", "Dark Ochre", "Crokite", "Spodumain", "Bistot", "Arkonor", "Mercoxit"]
ore_vars = pulp.LpVariable.dicts("Ore", ores, lowBound=0)

# Define the mineral requirements (example values, adjust as necessary)
requirements = {
    "Tritanium": 50000,
    "Pye": 0,
    "Mex": 0,
    "Iso": 0,
    "Noc": 0,
    "Zyd": 0,
    "Meg": 0,
    "Mor": 0
}

# Mineral content per ore type from your table (adjust values if necessary)
content = {
    "Veldspar": {"Tritanium": 400},
    "Scordite": {"Tritanium": 150, "Pye": 90},
    "Pyroxeres": {"Pye": 90, "Mex": 30},
    "Plagioclase": {"Tritanium": 175, "Mex": 70},
    "Omber": {"Pye": 90, "Iso": 75},
    "Kernite": {"Mex": 60, "Iso": 120},
    "Jaspet": {"Mex": 150, "Noc": 50},
    "Hemorphite": {"Iso": 240, "Noc": 90},
    "Hedbergite": {"Pye": 450, "Noc": 120},
    "Gneiss": {"Pye": 2000, "Mex": 1500, "Iso": 800},
    "Dark Ochre": {"Mex": 1360, "Iso": 1200, "Noc": 320},
    "Crokite": {"Pye": 800, "Mex": 2000, "Iso": 800},
    "Spodumain": {"Tritanium": 48000, "Iso": 1000, "Noc": 160, "Zyd": 80, "Meg": 40},
    "Bistot": {"Pye": 3200, "Mex": 1200, "Zyd": 160},
    "Arkonor": {"Pye": 3200, "Mex": 1200, "Meg": 120},
    "Mercoxit": {"Mor": 140}
}

# Objective function: minimize total ore used
problem += pulp.lpSum([ore_vars[ore] for ore in ores]), "Total Ore Used"

# Add constraints to meet mineral requirements
for mineral, requirement in requirements.items():
    problem += pulp.lpSum([content.get(ore, {}).get(mineral, 0) * ore_vars[ore] for ore in ores]) >= requirement, f"min_{mineral}"

# Solve the problem
problem.solve()

# Output the results
print("Status:", pulp.LpStatus[problem.status])
for v in problem.variables():
    if v.varValue > 0:
        print(v.name, "=", v.varValue)

# Display the objective value (total ore used)
print("Total Ore Used:", pulp.value(problem.objective))
