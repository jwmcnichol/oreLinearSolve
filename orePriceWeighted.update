import pulp

content = {
    "Veldspar": {"Tritanium": 400},
    "Scordite": {"Tritanium": 150, "Pye": 90},
    "Pyroxeres": {"Pye": 90, "Mex": 30},
    "Plagioclase": {"Tritanium": 175, "Mex": 70},
    "Omber": {"Pye": 90, "Iso": 75},
    "Kernite": {"Mex": 60, "Iso": 120},
    "Jaspet": {"Mex": 150, "Noc": 50},
    "Hemorphite": {"Iso": 240, "Noc": 90},
    "Hedbergite": {"Pye": 450, "Noc": 120},
    "Gneiss": {"Pye": 2000, "Mex": 1500, "Iso": 800},
    "Dark Ochre": {"Mex": 1360, "Iso": 1200, "Noc": 320},
    "Crokite": {"Pye": 800, "Mex": 2000, "Iso": 800},
    "Spodumain": {"Tritanium": 48000, "Iso": 1000, "Noc": 160, "Zyd": 80, "Meg": 40},
    "Bistot": {"Pye": 3200, "Mex": 1200, "Zyd": 160},
    "Arkonor": {"Pye": 3200, "Mex": 1200, "Meg": 120},
    "Mercoxit": {"Mor": 140},
    "pinkmod": {
                'Tritanium': 330780.0, 'Pye': 367852.8, 'Mex': 940684.42,
                'Iso': 3744000.0, 'Noc': 3128992.0, 'Zyd': 275196.0, 'Meg': 208000.0
                }
}
cost = {
    "pinkmod": 4900000,
    "Scordite": 27.77,
    "Pyroxeres": 35.5,
    "Plagioclase": 228,
    "Omber": 443.8,
    "Kernite": 601.1,
    "Jaspet": 1733,
    "Hemorphite": 1550,
    "Hedbergite": 3450,
    "Gneiss": 8400,
    "Dark Ochre": 9209,
    "Crokite": 2800,
    "Bistot": 6260,
    "Arkonor": 20980,
    "Spodumain": 24910,
    "Bezdnacine": 16970,
    "Rakovene": 18000,
    "Talassonite": 64000,
    "Mercoxit": 83.88,
    "Mordunium": 799.9,
    "Ytirium": 3600,
    "Eifyrium": 8000,
    "Ducinium": 1000,
    "Veldspar": 14.99
}
requirements = {
    "Tritanium": 50000,
    "Pye": 265000,
    "Mex": 1250000,
    "Iso": 65120,
    "Noc": 9000,
    "Zyd": 700,
    "Meg": 900,
    "Mor": 5
}

# Initialize the linear programming model
model = pulp.LpProblem("Minimize_Cost", pulp.LpMinimize)

# ore variables, must be > 0
ore_vars = {ore: pulp.LpVariable(f"ore_{ore}", lowBound=0, cat=pulp.LpInteger) for ore in cost}

# objective
model += pulp.lpSum([cost[ore] * ore_vars[ore] for ore in cost]), "Total Cost"

# constraints
for mineral, req in requirements.items():
    model += (
        pulp.lpSum([content.get(ore, {}).get(mineral, 0) * ore_vars[ore] for ore in content]) >= req,
        f"Req_{mineral}"
    )

model.solve()


print("Status:", pulp.LpStatus[model.status])

for ore in ore_vars:
    print(ore, "=", pulp.value(ore_vars[ore]))

total_cost = pulp.value(model.objective)
print("Total Cost = ", total_cost)

